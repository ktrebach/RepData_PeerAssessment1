message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
##test matrices:  test<-matrix(c(2,-2,0,3), ncol=2,nrow=2)
##testinv<-solve(test)
##test%*%testinv  shows that "solve" works
test<-matrix(c(2,-2,0,3), ncol=2,nrow=2)
test
ls()
makeVector()
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(solve) m <<- solve
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## The second function, returns the inverse, pulling the cached inverse if it has previously
##been calculated or computing it if it hasn't
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
m
}
test<-matrix(c(2,-2,0,3), ncol=2,nrow=2)
makeCacheMatrix(test)
ls()
test2<-makeCacheMatrix(test)
test2
test2$get
test2$set
test2$setmean
test2$getmean
cacheSolve(test2)
test2
test2$getmean
test2$getmean
test2$setmean
cacheSolve(test2)
test2$setmean
test2$getmean
m
search()
search(1)
search(makeCacheMatrix)
?url
url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
raw<-url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
read.table(raw)
read.table(raw)
raw<-url("https://d396qusza40orc.cloudfront.net/getdata%2Fwksst8110.for")
raw
class(raw)
mywidths<-c(1,9,c(4,3,3 rep=4))
?c
?rep
mywidths<-c(1,9,rep(c(4,3,3),4))
mywidths
length(mywidths)
myskip<-4
mynames<-c("blank1","week","blank2","Nino1+2 SST","Nino1+2 SSTA",
"blank3","Nino3 SST","Nino3 SSTA","Nino34 SST","Nino34 SSTA",
"Nino4 SST","Nino4 SSTA")
mynames
mynames<-c("blank1","week","blank2","Nino1+2 SST","Nino1+2 SSTA",
"blank3","Nino3 SST","Nino3 SSTA","blank4", "Nino34 SST","Nino34 SSTA",
"blank5","Nino4 SST","Nino4 SSTA")
mynames
mydata<-read.fwf(raw, mywidths, header = FALSE, sep = "\t", as.is = FALSE, skip=myskip,
col.names=c("blank1","week","blank2","Nino1+2 SST","Nino1+2 SSTA",
"blank3","Nino3 SST","Nino3 SSTA","blank4", "Nino34 SST","Nino34 SSTA",
"blank5","Nino4 SST","Nino4 SSTA"))
setwd(~/Downloads)
setwd("~/Desktop/Data Scientist JH MOOC")
mydata<-read.fwf(getdata-wksst8110.for, mywidths, header = FALSE, sep = "\t", as.is = FALSE, skip=myskip,
col.names=c("blank1","week","blank2","Nino1+2 SST","Nino1+2 SSTA",
"blank3","Nino3 SST","Nino3 SSTA","blank4", "Nino34 SST","Nino34 SSTA",
"blank5","Nino4 SST","Nino4 SSTA"))
mydata<-read.fwf("getdata-wksst8110.for", mywidths, header = FALSE, sep = "\t", as.is = FALSE, skip=myskip,
col.names=c("blank1","week","blank2","Nino1+2 SST","Nino1+2 SSTA",
"blank3","Nino3 SST","Nino3 SSTA","blank4", "Nino34 SST","Nino34 SSTA",
"blank5","Nino4 SST","Nino4 SSTA"))
class(mydata)
names(mydata)
attach(mydata)
test1<-is.blank(blank1)
?is.null
test1<-is.null(blank1)
close(raw)
sum(test1)
test1
blank1
blank2
blank3
mywidths
week
?read.table
mydata<-read.fwf("getdata-wksst8110.for", mywidths, header = FALSE, sep = "\t", as.is = FALSE, skip=myskip,
col.names=c("blank1","week","blank2","Nino1+2 SST","Nino1+2 SSTA",
"blank3","Nino3 SST","Nino3 SSTA","blank4", "Nino34 SST","Nino34 SSTA",
"blank5","Nino4 SST","Nino4 SSTA"),colClasses = "character")
head(mydata)
detach(mydata)
str(mydata)
nchar(mydata[1,1])
nchar(mydata[1,2])
nchar(mydata[1,3])
nchar(mydata[1,4])
mydata[,2]
mywidths<-c(1,9,rep(c(5,4,4),4))
mydata<-read.fwf("getdata-wksst8110.for", mywidths, header = FALSE, sep = "\t", as.is = FALSE, skip=myskip,
col.names=c("blank1","week","blank2","Nino1+2 SST","Nino1+2 SSTA",
"blank3","Nino3 SST","Nino3 SSTA","blank4", "Nino34 SST","Nino34 SSTA",
"blank5","Nino4 SST","Nino4 SSTA"),colClasses = "character")
head(mydata)
attach(mydata)
blank1
blank2
blank3
blank4
blank5
myfinal<-mydata[,c(2,4,5,7,8,10,11,13,14)]
head(myfinal)
sum(Nino4.SSTA)
sum(as.numeric(Nino4.SSTA)
)
sapply(myfinal,sum)
sum(as.numeric(Nino3.SST)
)
sum(as.numeric(myfinal[,4]))
sapply(myfinal,sum(as.numeric(myfinal[,4])))
con()
is.open()
y<-rbinom(1:10)
?rbinom
y<-rbinom(10,1,.5)
y
?supress warning
library(datasets)
data(airquality)
pairs(airquality)
?lm
?glm
?lm
lm(Ozone ~ Solar.R + Wind + Temp, data=airquality)
lm(Ozone ~ Solar.R + Wind + Temp, data=airquality)->fit
fit
summary(fit)
plot(fit)
plot(fit)
datasets()
library(nycflights13)
data(nycflights13)
ls()
data()
setwd("~/Desktop/Data Scientist JH MOOC/ReproRsch/RepData_PeerAssessment1")
---
title: "Reproducible Research: Peer Assessment 1"
source('~/.active-rstudio-document', echo=TRUE)
?complete.cases
IncompleteCases <- sum(!complete.cases(stepData))
IncompleteCases
PctIC<-IncompleteCases/nrows(stepData)
PctIC<-IncompleteCases/nrow(stepData)
PctIC
printpct<-function(x){
y<-round(x*100,2)
paste(y,"%",sep="")
}
printpct(PctIc)
printpct(PctIC)
print(printpct(PctIC))
head(stepData)
str(stepData)
head(byinterval)
stepComplete <- stepData
stepCompleteT <- stepComplete[complete.cases(stepComplete),]
stepCompleteF <- stepComplete[!complete.cases(stepComplete),]
?merge
stepCompleteN <- merge(stepCompleteF,byinterval, by.x=interval, by.y=interval, all.x=all)
stepCompleteN <- merge(stepCompleteF, byinterval, by.x=interval, by.y=interval, all.x = all)
head(stepCompleteF)
head(byinterval)
stepCompleteN <- merge(stepCompleteF, byinterval, by.x = interval, by.y = interval)
stepCompleteN <- merge(stepCompleteF, byinterval, by = interval)
intersect(stepCompleteF,byinterval)
intersect(names(stepCompleteF),names(byinterval)
)
?join
?merge
test<-join(stepDataF,byinterval)
test<-merge(stepDataF,byinterval)
test<-merge(stepCompleteF,byinterval)
head(test)
tail(test)
rm(test)
stepCompleteN <- merge(stepCompleteF, byinterval)
head(stepCompleteN)
head(stepCompleteT)
?select
stepCompleteN <- select(stepCompleteN, dateN, interval, steps = x)
head(stepCompleteN)
stepComplete <- arrange(rbind(stepCompleteT,stepCompleteN), dateN, interval)
head(stepComplete)
sum(is.na(stepComplete))
meanstepsCbyday <- aggregate(stepComplete[,3], by = list(dateN = as.factor(stepComplete$dateN)),
FUN = sum)
meanstepsC <- format(round(mean(meanstepsCbyday$x, na.rm = TRUE),0), big.mark = ",")
medianstepsC <- format(round(median(meanstepsCbyday$x, na.rm = TRUE),0), big.mark = ",")
hist(meanstepsCbyday$x, main="Histogram of Total Steps w/Assumption for Missing Data",
xlab = "Number of Steps per Day")
meanstepsC
mediansteps
medianstepsC
meansteps
table(stepCompleteF$interval)
head(stepData)
?tapply
tapply(stepData$steps,interval,fun=sum(is.na))
test<-stepData$steps==NA
sum(test)
test
test<-stepData$steps=="NA"
test
head(test, 100)
head(stepData)
head(stepData,100)
if(!file.exists("activity.csv")) {unzip("activity.zip")}
stepData <- read.csv("activity.csv", stringsAsFactors = FALSE)
NAcount<-format(sum(is.na(stepData)), big.mark = ",")
IncompleteCases <- sum(!complete.cases(stepData))
PctIC<-IncompleteCases/nrow(stepData)
dateN <- as.POSIXlt(stepData$date)
stepData <- cbind(stepData, dateN)
stepData <- select(stepData, dateN, interval, steps)
head(stepData,100)
sum(stepData$steps)
sum(stepData$steps,rm.na=T)
sum(stepData$steps,na.rm=T)
sum(stepData$steps,na.rm=T)/61
sum(is.na(stepData[stepData$interval==0,])
)
sum(is.na(stepData[stepData$interval==1,]))
sum(is.na(stepData[stepData$interval==5,]))
sum(is.na(stepData[stepData$interval==10,]))
sum(is.na(stepData[stepData$interval==15,]))
sum(is.na(stepData[stepData$interval==2355,]))
sum(is.na(stepData[stepData$interval==2255,]))
test<-sapply(stepData[stepData$interval],interval,sum(is.na))
?sapply
tapply
?tapply
test<-tapply(stepData[stepData$interval],interval,sum(is.na))
test<-tapply(is.na(stepData[stepData$interval]),interval,sum)
test<-tapply(is.na(stepData$steps),interval,sum)
levels(stepData$interval)
head(stepData)
str(stepData)
test<-tapply(stepData$steps,as.factor(stepData$interval),is.na)
heat(test)
head(test)
test2<-sum(test)
test2<-sapply(test,sum)
test2
range(test2)
?as.matrix
?as.data.frame
test3 <- matrix(c(28, 20, 289, 276), byrow = TRUE, 2, 2)
test3
test3 <- matrix(c(meansteps, meanstepsC, mediansteps, medianstepsC), byrow = TRUE, 2, 2, rownames = c("Mean","Median"), col.names = c("Original","Modified"))
?matrix
test3 <- matrix(c(meansteps, meanstepsC, mediansteps, medianstepsC), byrow = TRUE, 2, 2, dimnames = list(c("Mean","Median"),c("Original","Modified")))
test3
print(comptable)
comptable <- matrix(c(meansteps, meanstepsC, mediansteps, medianstepsC), byrow = TRUE, 2, 2, dimnames = list(c("Mean","Median"),c("Original","Modified")))
comptable
print(comptable)
library("xtable", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
library(xtable)
library("xtable", lib.loc="/Downloads")
install.packages(xtable)
install.packages("xtable")
library(xtable)
print(comptable)
?xtable
print(comptable, type="html")
comptable <- xtable(matrix(c(meansteps, meanstepsC, mediansteps, medianstepsC), byrow = TRUE, 2, 2,
dimnames = list(c("Mean","Median"),c("Original","Modified"))))
comptable
test<-weekdays(stepComplete$dateN)
head(test)
tail(test)
Dayname <- weekdays(stepComplete$dateN)
?as.factor
for(i in 1:length(Dayname)) {
if(Dayname[i]=="Saturday"|Dayname[i]=="Sunday") {
Dayname[i] <- "weekend"
}else{
Dayname[i] <- "weekday"
}
}
head(Dayname, 100)
head(Dayname, 300)
sum(Dayname=="weekend")
sum(Dayname=="weekday")
Dayname <- factor(Dayname)
stepComplete <- cbind(stepComplete, Dayname)
head(stepComplete)
str(stepComplete)
byintervalDN <- aggregate(stepComplete[,3], by = list(interval = as.factor(stepComplete$interval)),
FUN = mean, na.rm=TRUE)
head(byintervalDN)
byintervalDN <- aggregate(stepComplete[,3], by = list(interval =
as.factor(stepComplete$interval),Dayname = stepComplete$Dayname),
FUN = mean, na.rm=TRUE)
head(byintervalDN)
str(byintervalDN)
xyplot(x ~ as.numeric(interval)|Dayname, layout = c(2,1), data = byintervalDN,
type="l", ylab = "Average Number of Steps",
xlab = "Interval", main = "Average Daily Activity Pattern",
sub = "Number of Steps by 5-Minute Interval",
scales = list(x = list(tick.number = 20)))
xyplot(x ~ as.numeric(interval)|Dayname, layout = c(1,2), data = byintervalDN,
type="l", ylab = "Average Number of Steps",
xlab = "Interval", main = "Average Daily Activity Pattern",
sub = "Number of Steps by 5-Minute Interval",
scales = list(x = list(tick.number = 20)))
rm(list=ls())
suppressWarnings(library(knitr))
library(markdown)
suppressWarnings(library(dplyr))
library(lattice)
library(lubridate)
library(xtable)
## Function to format as percent
printpct<-function(x){
y<-round(x*100,2)
paste(y,"%",sep="")
}
## Unzip if necesary, read table into R
if(!file.exists("activity.csv")) {unzip("activity.zip")}
stepData <- read.csv("activity.csv", stringsAsFactors = FALSE)
## Count NA values
NAcount<-format(sum(is.na(stepData)), big.mark = ",")
IncompleteCases <- sum(!complete.cases(stepData))
PctIC<-IncompleteCases/nrow(stepData)
## Convert dates to POSIXlt
dateN <- as.POSIXlt(stepData$date)
stepData <- cbind(stepData, dateN)
stepData <- select(stepData, dateN, interval, steps)
## Aggregate the number of steps by day
meanstepsbyday <- aggregate(stepData[,3], by = list(dateN = as.factor(stepData$dateN)),
FUN = sum)
## Find the mean and the median
meansteps <- format(round(mean(meanstepsbyday$x, na.rm = TRUE),0), big.mark = ",")
mediansteps <- format(round(median(meanstepsbyday$x, na.rm = TRUE),0), big.mark = ",")
## Plot the histogram
hist(meanstepsbyday$x, main="Histogram of Total Steps Taken per Day", xlab = "Number of Steps per Day")
## Make interval a factor
stepData$interval <- as.factor(stepData$interval, labels = levels)
## Average the number of steps by interval
byinterval <- aggregate(stepData[,3], by = list(stepData$interval),
FUN = mean, na.rm=TRUE)
maxsteps <- round(max(byinterval$x), 0)
rownumb<-which(byinterval$x == max(byinterval$x))
maxinterval <- as.numeric(as.character(byinterval$interval[rownumb]))
xyplot(x ~ as.numeric(interval), data = byinterval, type="l", ylab = "Average Number of Steps",
xlab = "Interval", main = "Average Daily Activity Pattern",
sub = "Number of Steps by 5-Minute Interval",
scales = list(x = list(tick.number = 20)))
## Make interval a factor
stepData$interval <- as.factor(stepData$interval, labels = levels)
## Average the number of steps by interval
byinterval <- aggregate(stepData[,3], by = list(stepData$interval),
FUN = mean, na.rm=TRUE)
maxsteps <- round(max(byinterval$x), 0)
rownumb<-which(byinterval$x == max(byinterval$x))
maxinterval <- as.numeric(as.character(byinterval$interval[rownumb]))
xyplot(x ~ interval, data = byinterval, type="l", ylab = "Average Number of Steps",
xlab = "Interval", main = "Average Daily Activity Pattern",
sub = "Number of Steps by 5-Minute Interval",
scales = list(x = list(tick.number = 20)))
xyplot(x ~ interval, data = byinterval, type="l", ylab = "Average Number of Steps",
xlab = "Interval", main = "Average Daily Activity Pattern",
sub = "Number of Steps by 5-Minute Interval")
head(byinterval)
xyplot(x ~ Group.1, data = byinterval, type="l", ylab = "Average Number of Steps",
xlab = "Interval", main = "Average Daily Activity Pattern",
sub = "Number of Steps by 5-Minute Interval",
scales = list(x = list(tick.number = 12)))
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
## Make interval a factor
stepData$interval <- as.factor(stepData$interval)
## Average the number of steps by interval
byinterval <- aggregate(stepData[,3], by = list(stepData$interval),
FUN = mean, na.rm=TRUE)
maxsteps <- round(max(byinterval$x), 0)
rownumb<-which(byinterval$x == max(byinterval$x))
maxinterval <- as.numeric(as.character(byinterval$interval[rownumb]))
xyplot(x ~ Group.1, data = byinterval, type="l", ylab = "Average Number of Steps",
xlab = "Interval", main = "Average Daily Activity Pattern",
sub = "Number of Steps by 5-Minute Interval",
scales = list(x = list(tick.number = 12)))
rm(list=ls())
suppressWarnings(library(knitr))
library(markdown)
suppressWarnings(library(dplyr))
library(lattice)
library(lubridate)
library(xtable)
## Function to format as percent
printpct<-function(x){
y<-round(x*100,2)
paste(y,"%",sep="")
}
## Unzip if necesary, read table into R
if(!file.exists("activity.csv")) {unzip("activity.zip")}
stepData <- read.csv("activity.csv", stringsAsFactors = FALSE)
## Count NA values
NAcount<-format(sum(is.na(stepData)), big.mark = ",")
IncompleteCases <- sum(!complete.cases(stepData))
PctIC<-IncompleteCases/nrow(stepData)
head(stepData)
str(stepData)
## Convert dates to POSIXlt
dateN <- as.POSIXlt(stepData$date)
stepData <- cbind(stepData, dateN)
stepData <- select(stepData, dateN, interval, steps)
str(stepData)
## Convert dates to POSIXlt
dateN <- as.POSIXlt(stepData$date)
stepData <- cbind(stepData, dateN)
stepData <- select(stepData, dateN, interval = as.factor(interval), steps)
head(stepData)
rm(list=ls())
suppressWarnings(library(knitr))
library(markdown)
suppressWarnings(library(dplyr))
library(lattice)
library(lubridate)
library(xtable)
## Function to format as percent
printpct<-function(x){
y<-round(x*100,2)
paste(y,"%",sep="")
}
## Unzip if necesary, read table into R
if(!file.exists("activity.csv")) {unzip("activity.zip")}
stepData <- read.csv("activity.csv", stringsAsFactors = FALSE)
## Count NA values
NAcount<-format(sum(is.na(stepData)), big.mark = ",")
IncompleteCases <- sum(!complete.cases(stepData))
PctIC<-IncompleteCases/nrow(stepData)
## Convert dates to POSIXlt
dateN <- as.POSIXlt(stepData$date)
stepData <- cbind(stepData, dateN)
stepData <- select(stepData, dateN, interval = as.factor(interval), steps)
str(stepData)
stepData <- read.csv("activity.csv", stringsAsFactors = FALSE)
## Convert dates to POSIXlt
dateN <- as.POSIXlt(stepData$date)
stepData <- cbind(stepData, dateN)
stepData <- select(stepData, dateN, interval, steps)
str(stepData)
stepData$interval <- as.factor(stepData$interval, labels = levels)
?as.factor
stepData$interval <- as.factor(stepData$interval)
str(stepData)
byinterval <- aggregate(stepData[,3], by = list(stepData$interval),
FUN = mean, na.rm=TRUE)
head(byinterval)
byinterval <- aggregate(stepData[,3], by = list(interval = stepData$interval),
FUN = mean, na.rm=TRUE)
head(byinterval)
str(byinterval)
levels(byinterval$interval)
xyplot(x ~ interval, data = byinterval, type="l", ylab = "Average Number of Steps",
xlab = "Interval", main = "Average Daily Activity Pattern",
sub = "Number of Steps by 5-Minute Interval",
scales = list(x = list(tick.number = 12)))
xyplot(x ~ as.numeric(as.character(interval)), data = byinterval, type="l", ylab = "Average Number of Steps",
xlab = "Interval", main = "Average Daily Activity Pattern",
sub = "Number of Steps by 5-Minute Interval",
scales = list(x = list(tick.number = 12)))
rm(list=ls())
source('~/.active-rstudio-document', echo=TRUE)
xyplot(x ~ as.numeric(as.character(interval))|Dayname, layout = c(1,2), data = byintervalDN,
type="l", ylab = "Average Number of Steps",
xlab = "Interval", main = "Average Daily Activity Pattern",
sub = "Number of Steps by 5-Minute Interval",
scales = list(x = list(tick.number = 12)))
?knit2html
